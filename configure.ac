#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.67])
AC_INIT(ProbABEL, 0.3.0-beta2, genabel-devel@r-forge.wu-wien.ac.at)
AM_INIT_AUTOMAKE(ProbABEL, 0.3.0-beta2)
AC_CONFIG_SRCDIR([src/data.h])
AC_CONFIG_HEADERS([src/config.h])

# Checks for programs.
AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_INSTALL
AC_PROG_LN_S
if test -z "$CXXFLAGS"; then
   # User did not set CXXFLAGS, so we can put in our own defaults
    CXXFLAGS="-g -O2"
fi
if test -z "$CPPFLAGS"; then
   # User did not set CPPFLAGS, so we can put in our own defaults
    CPPFLAGS="-Wall"
fi
# If CXXFLAGS/CPPFLAGS are already set AC_PROG_CXX will not overwrite them
# with its own defaults
AC_PROG_CXX

# Since most of our code is in C++, set that language as the default
# for the subsequent checks
AC_LANG_PUSH([C++])

# Checks for libraries.

# Checks for header files.
AC_FUNC_ALLOCA
AC_CHECK_HEADERS([float.h inttypes.h libintl.h limits.h stddef.h \
			  stdint.h stdlib.h string.h sys/param.h wchar.h wctype.h])


# See if we want use of the Eigen library enabled (yes by default) and if so,
# whether we can find the library files.
AC_ARG_ENABLE([eigen],
 [AS_HELP_STRING([--enable-eigen], [Use the Eigen template library for fast \
				    linear algebra (Eigen can be downloaded \
				    from eigen.tuxfamily.org). This is enabled \
				    by default])],
 [eigen=${enableval}],
 [eigen=yes])

if test "x$eigen" = "xyes"; then
    AC_MSG_NOTICE([building using the Eigen headers enabled])

    AC_ARG_WITH([eigen-include-path],
	[AS_HELP_STRING([--with-eigen-include-path],
	  [location of the Eigen headers, defaults to /usr/include/eigen3])],
	[CXXFLAGS+=" -I${withval}"],
	[CXXFLAGS+=' -I/usr/include/eigen3'
	CPPFLAGS+=' -I/usr/include/eigen3'])
    dnl AC_SUBST([EIGEN_CFLAGS])

    # Check for the EIGEN header files
    AC_CHECK_HEADERS([Eigen/Dense Eigen/LU])

    if test x$ac_cv_header_Eigen_Dense = xno; then
      AC_MSG_ERROR([Could not find the Eigen header files. Did you specify \
--with-eigen-include-path correctly? Or use --disable-eigen \
to disable use of fast linear algebra.])
    fi
else
   AC_MSG_NOTICE([not using Eigen for linear algebra])
fi
AM_CONDITIONAL([WITH_EIGEN], test "x$eigen" = "xyes")


# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_INLINE
AC_TYPE_OFF_T
AC_TYPE_SIZE_T

# Checks for library functions.
AC_FUNC_ERROR_AT_LINE
AC_FUNC_MALLOC
AC_CHECK_FUNCS([pow putenv sqrt strdup strncasecmp floor])

# Check if we can use large (>2GB) files on 32 bit platforms
AC_SYS_LARGEFILE
if test $ac_cv_sys_file_offset_bits != 'no'; then
    CPPFLAGS="$CPPFLAGS -D_FILE_OFFSET_BITS=$ac_cv_sys_file_offset_bits"
fi
AC_FUNC_FSEEKO

# Check for presence of sed. Needed to replace path to /etc in probabel.pl
AC_PROG_SED

# Check for the presence of awk. Needed in the test suite
AC_PROG_AWK

# Check for presence of pdfLaTeX
AC_CHECK_PROG(PDFLATEX, pdflatex, pdflatex)
if test -z "$PDFLATEX"; then
  AC_MSG_WARN([Unable to create PDF version of the user manual])
fi

AM_CONDITIONAL([HAVE_PDFLATEX], test -n "$PDFLATEX")

# Since pacoxph is buggy it needs to be enabled explixitly
AC_ARG_ENABLE([pacoxph],
    [AS_HELP_STRING([--enable-pacoxph], [build the pacoxph binary (still \
contains lots of bugs)])],
    [pacoxph=${enableval}],
    [pacoxph=no])

if test "x$pacoxph" = "xyes"; then
   AC_MSG_NOTICE([building of pacoxph is enabled])
fi

AM_CONDITIONAL([BUILD_pacoxph], test "x$pacoxph" = "xyes")

# Files to be generated by autotools
AC_CONFIG_FILES([
	Makefile
	src/Makefile
	doc/Makefile
	examples/Makefile
	tests/Makefile
])
# Create output files
AC_OUTPUT
