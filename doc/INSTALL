These instructions show how to build ProbABEL.

* Compiling for Linux

  If you downloaded the source from SVN (this is not
  necessary when installing from the distributed .tar.gz file), run:
autoreconf -i

  to generate the ./configure script and some other files.

  Now, you are ready to compile and install the package. Run the
  following commands:
./configure
make
make install

  This will install the binaries (palinear etc.) in /usr/local/bin/,
  the documentation in /usr/local/share/doc/probabel/, the
  probabel_config.cfg file in /usr/local/etc/, and the examples in
  /usr/local/share/ProbABEL/examples/. The ./configure script tests
  for the presence of the pdflatex program. If it is not present the
  PDF version of the documentation will not be built.

  NOTE: make install will OVERWRITE any file with the same name if it
  already exists. Also the probabel_config.cfg file in
  /usr/local/etc, even if the user modified it with his/her own
  settings. This is one reason why using the package manager for your
  distribution (apt for Debian, yum for RHEL, CentOS, etc., pkgtools
  for Slackware) is recommended. Package managers do note that a file
  has user-made changes and ask what to do (or make a backup).

  To see options, run

./configure --help

  The most notable option is
./configure --prefix=/some/subdirectory

  to install ProbABEL in that subdirectory. Instead of using
  /usr/local/ as install root directory, it installs in /some/subdirectory.

  To generate a .tar.gz package for distribution run:
./configure
make dist

  To test if all your changes to the source files will be packaged
  into the tar.gz file correctly run
./configure
make distcheck

  To clean up all files generated by ./configure and make, run
make distclean

  Running
make uninstall

  will uninstall the files previously installed by 'make install'.


* Cross-compiling for Windows on Linux

  The following steps show how to compile 32bit windows binaries on a
  Linux machine.
  First, install the necessary MINGW32 packages. On Debian/Ubuntu this
  can be done in the following way:
apt-get install mingw32{-binutils,-runtime} gcc-mingw32

  Now the binaries can be compiled (I've added a prefix so that when
  running 'make install' the whole directory structure can be zipped
  easily):
./configure --host=i586-mingw32msvc --build=i686-linux-gnu \
	    --prefix=/tmp/PA --sysconfdir=/tmp/PA/ \
	    --datarootdir=/tmp/PA --docdir=/tmp/PA/doc

  The --host option sets the type of the host the programs will be run
  on, the --build option sets the type of machine you are building the
  package on (cf. the Autoconf manual:
  http://www.gnu.org/software/hello/manual/autoconf/Specifying-Target-Triplets.html). In
  this example I was using a 32bit Ubuntu install. For a 64 bit linux
  system this will be x86_64-linux-gnu. Note that the values for both
  these options can be derived from the names of the compiler
  executables, e.g. the gcc-mingw32 Debian package installs the
  folowing C++ compiler: /usr/bin/i586-mingw32msvc-c++.
  The --[somedir] options are used to make the directory structure as
  flat as possible so that we don't bother Windows users with
  subdirectories like 'share/' and 'etc/'.

  Now you can run
make
make install

  This creates the binaries pacoxph.exe, palinear.exe and
  palogist.exe (as well as the examples and documentation). The
  contents of /tmp/PA can then be zipped and distributed.
