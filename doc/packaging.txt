This file explains how to generate packages (deb, rpm) for different Linux
distributions.

* Debian (and Ubuntu) packages
** Install the necessary requirements
   The following packages need to be installed (in addition to the
   ones you need to compile the source anyway):
   - dh-make
   - fakeroot
   - lintian
** Building the package for the first time
   First check to see if everything compiles and all files are included
   in the automake files:
    ./configure
    make distcheck
   If there are no errors, a tar.gz file of the source should be
   created. Let's create the package.
    mkdir /tmp/PA-deb
    cp ProbABEL-0.2.0.tar.gz /tmp/PA-deb
    cd /tmp/PA-deb
   Debian packages must have lowercase letters, so we'll have to rename
   the directory after untar-ing it.
    tar -xzf ProbABEL-0.2.0.tar.gz
    mv ProbABEL-0.2.0 probabel-0.2-0
    cd probabel-0.2.0
    dh_make --single --email youremail@example.com \
     --file ../ProbABEL-0.2.0.tar.gz --copyright gpl2 \
     --packagename probabel

   Hit the enter key to confirm the settings. Several files need to be
   edited.
   - debian/control
   - debian/changelog
   - debian/copyright
   - debian/README.Debian
   dh_make also creates several example scripts in the debian/
   directory. We don't need them, so they can be delete:
    rm debian/*.ex debian/*.EX
   Now the package can be built (NOTE that dpkg-buildpackage replaces our default CXXFLAGS with "-g -O2"):
    dpkg-buildpackage -rfakeroot -us -uc
   This creates an unsigned ~.deb~ file in the parent directory. As a
   final touch you can check you package for errors with
    lintian ../probabel_0.2.0-1_amd64.deb
   Several warnings will show up (e.g. binaries without man-pages),
   but we ignore these for now. If you are interested in a more
   detailed explanation of the warnings, add the -i option to the
   lintian command.
   These last two commands can be run in one go using debuild (which
   is part of the devscripts package):
    debuild -i -us -uc -b
** Uploading to an Ubuntu PPA (Personal Package Archive)
   Building a package for upload to a PPA is almost the same as shown above:
    debuild -i -S -kYOURKEYID
   where YOURKEYID is the ID of the gpg key you use for signing your
   package (this key should be known by launchpad).
   To upload the package created above to the GenABEL PPA simply type:
    dput ppa:l.c.karssen/genabel-ppa ../probabel_0.2.0-1_source.changes
